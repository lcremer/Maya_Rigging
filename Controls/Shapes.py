import maya.cmds as mc

def Swap(index):
    """
    Replaces shape of selected control for new shape from index
    """
    control = mc.ls(selection=True)[0]
    CreateControl("swapControl",index)
    mc.select("swapControl")
    swapControl = mc.ls(selection=True)[0]
    childShapes = mc.listRelatives(control, s=True)
    mc.delete(mc.parentConstraint(control, swapControl, mo=False))
    mc.parent(swapControl, control)
    mc.makeIdentity(swapControl)
    for child in childShapes:
        mc.delete(child)
    childShapes = mc.listRelatives(swapControl, s=True)
    for child in childShapes:
        mc.parent(child, control, r=True, s=True)
    mc.delete(swapControl)

def Combine(index):
    """
    Combines shape of selected control with new shape from index
    """
    control = mc.ls(selection=True)[0]
    CreateControl("swapControl",index)
    mc.select("swapControl")
    swapControl = mc.ls(selection=True)[0]
    mc.parent(swapControl, control)
    mc.makeIdentity(swapControl)
    childShapes = mc.listRelatives(swapControl, s=True)
    for child in childShapes:
        mc.parent(child, control, r=True, s=True)
    mc.delete(swapControl)

#used to create shape for ProxyMain
def ProxyMain():
    CreateControl("proxyMain",31)
    mc.select("proxyMain")
    mc.pickWalk(d="down")
    mc.rename("proxyMainShape")

    CreateControl("proxyMain2", 32)
    mc.select("proxyMain2")
    mc.pickWalk(d="down")
    mc.rename("proxyMainShape2")
    mc.parent("proxyMainShape2","proxyMain",r=True, s=True)
    mc.delete("proxyMain2")
    mc.delete("proxyMain",ch=True)

    mc.setAttr("proxyMain.tx",lock=True, keyable=False, channelBox=False)
    mc.setAttr("proxyMain.tz",lock=True, keyable=False, channelBox=False)
    mc.setAttr("proxyMain.rx",lock=True, keyable=False, channelBox=False)
    mc.setAttr("proxyMain.ry",lock=True, keyable=False, channelBox=False)
    mc.setAttr("proxyMain.rz",lock=True, keyable=False, channelBox=False)
    mc.setAttr("proxyMain.v",lock=True, keyable=False, channelBox=False)

    mc.transformLimits("proxyMain",sx=(0.01,1), esx=(1, 0))
    mc.transformLimits("proxyMain",sy=(0.01,1), esy=(1, 0))
    mc.transformLimits("proxyMain",sz=(0.01,1), esz=(1, 0))

def ProxyModule(crntUnit = ''):
    #CREATE PROXY BASE
	mc.circle(n="proxyBase", c=(0,0,0), nr=(0,1,0), sw=360, r=0.25, d=3, ut=0, tol=0.01, s=8, ch=1)
	mc.duplicate(n="proxyBaseB", rr=True)
	mc.rotate(90,0,0)
	mc.makeIdentity("proxyBaseB", apply=True, t=True, r=True, s=True)
	mc.duplicate(n="proxyBase_CTRL", rr=True)
	mc.rotate(0,90,0)
	mc.makeIdentity("proxyBase_CTRL", apply=True, t=True, r=True, s=True)

	mc.spaceLocator(n="proxyBaseD")
	mc.setAttr("proxyBaseDShape.localScaleZ", .25)
	mc.setAttr("proxyBaseDShape.localScaleX", .25)
	mc.setAttr("proxyBaseDShape.localScaleY", .25)

	if crntUnit == "m":
	    mc.setAttr("proxyBaseDShape.localScaleZ", .0025)
	    mc.setAttr("proxyBaseDShape.localScaleX", .0025)
	    mc.setAttr("proxyBaseDShape.localScaleY", .0025)

	mc.parent("proxyBaseBShape", "proxyBase_CTRLShape", "proxyBaseDShape", "proxyBase", r=True, s=True)
	mc.delete("proxyBaseB", "proxyBase_CTRL", "proxyBaseD")
	mc.select("proxyBase")
	mc.makeIdentity("proxyBase", apply=True, t=True, r=True, s=True)
	mc.delete("proxyBase",ch=True)

def CreateControl(name, index):
    # Cube
    if index == 0:
        mc.curve(n=name,d=1, p=((0.5,0.5,-0.5),(0.5,0.5,0.5),(0.5,-0.5,0.5),
        (0.5,-0.5,-0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,-0.5,-0.5),
        (-0.5,-0.5,0.5),(-0.5,0.5,0.5),(0.5,0.5,0.5),(0.5,-0.5,0.5),
        (-0.5,-0.5,0.5),(-0.5,-0.5,-0.5),(0.5,-0.5,-0.5),(0.5,0.5,-0.5),
        (-0.5,0.5,-0.5),(-0.5,0.5,0.5),(0.5,0.5,0.5),(0.5,0.5,-0.5)),
        k=(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8))
    # Circle
    elif index == 1:
        mc.circle(n=name, nr=(1,0,0), c=(0,0,0), sw=360, r=1, d=3, ut=0, tol=0.01, s=8, ch=0)
    # Arrow On Ball
    elif index == 2:
        mc.curve(n=name, d=1, p=((0,0.35,-1.001567),(-0.336638,0.677886,-0.751175),
        (-0.0959835,0.677886,-0.751175),(-0.0959835,0.850458,-0.500783),
        (-0.0959835,0.954001,-0.0987656),(-0.500783,0.850458,-0.0987656),
		(-0.751175,0.677886,-0.0987656),(-0.751175,0.677886,-0.336638),
		(-1.001567,0.35,0),(-0.751175,0.677886,0.336638),(-0.751175,0.677886,0.0987656),
		(-0.500783,0.850458,0.0987656),(-0.0959835,0.954001,0.0987656),
		(-0.0959835,0.850458,0.500783),(-0.0959835,0.677886,0.751175),
		(-0.336638,0.677886,0.751175),(0,0.35,1.001567),(0.336638,0.677886,0.751175),
		(0.0959835,0.677886,0.751175),(0.0959835,0.850458,0.500783),
		(0.0959835,0.954001,0.0987656),(0.500783,0.850458,0.0987656),
		(0.751175,0.677886,0.0987656),(0.751175,0.677886,0.336638),(1.001567,0.35,0),
		(0.751175,0.677886,-0.336638),(0.751175,0.677886,-0.0987656),
		(0.500783,0.850458,-0.0987656),(0.0959835,0.954001,-0.0987656),
		(0.0959835,0.850458,-0.500783),(0.0959835,0.677886,-0.751175),
		(0.336638,0.677886,-0.751175),(0,0.35,-1.001567)),k=(0,1,2,3,
        4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
		30,31,32))
    # Single Arrow
    elif index == 3:
        mc.curve(n=name, d=1, p=((-0.66,0,-0.33),(0,0,-0.33),(0,0,-0.66),(0.99,0,0),(0,0,0.66),
		(0,0,0.33),(-0.66,0,0.33),(-0.66,0,-0.33)), k=(0,1,2,3,4,5,6,7))
    # 4 Large Arrows
    elif index == 4:
        mc.curve(n=name, d=1, p=((0,0,-1.1025),(-0.33,0,-0.6075),(-0.165,0,-0.6075),(-0.165,0,-0.165),
        (-0.6075,0,-0.165),(-0.6075,0,-0.33),(-1.1025,0,0),(-0.6075,0,0.33),(-0.6075,0,0.165),
        (-0.165,0,0.165),(-0.165,0,0.6075),(-0.33,0,0.6075),(0,0,1.1025),(0.33,0,0.6075),
        (0.165,0,0.6075),(0.165,0,0.165),(0.6075,0,0.165),(0.6075,0,0.33),(1.1025,0,0),
        (0.6075,0,-0.33),(0.6075,0,-0.165),(0.165,0,-0.165),(0.165,0,-0.6075),(0.33,0,-0.6075),
        (0,0,-1.1025)), k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24))
    # 180 Arrow
    elif index == 5:
        mc.curve(n=name, d=1, p=((-1.084005,0,-0.092136),(-0.791121,0,-0.955956),(-0.707107,0,-0.707107),
        (-0.570265,0,-0.843948),(-0.205819,0,-1.040044),(0.405223,0,-0.978634),
        (0.881027,0,-0.588697),(1.059487,0,0),(0.881027,0,0.588697),(0.405223,0,0.978634),
        (-0.205819,0,1.040044),(-0.570265,0,0.843948),(-0.707107,0,0.707107),
        (-0.791121,0,0.955956),(-1.084005,0,0.092136),(-0.315189,0,0.413069),
        (-0.540989,0,0.540989),(-0.436294,0,0.645682),(-0.157467,0,0.79571),
        (0.310025,0,0.748727),(0.67405,0,0.450396),(0.810585,0,0),(0.67405,0,-0.450396),
        (0.310025,0,-0.748727),(-0.157467,0,-0.79571),(-0.436294,0,-0.645682),(-0.540989,0,-0.540989),
        (-0.315189,0,-0.413069),(-1.084005,0,-0.092136),(-0.791121,0,-0.955956)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29))
    # Pin
    elif index == 6:
        mc.curve(n=name, d=1, p=((0,0,0),(0,1.2,0),(-0.235114,1.276393,0),(-0.380423,1.476393,0),
        (-0.380423,1.723607,0),(-0.235114,1.923607,0),(0,2,0),(0.235114,1.923607,0),
        (0.380423,1.723607,0),(0.380423,1.476393,0),(0.235114,1.276393,0),(0,1.2,0)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11))
    # 2 Pin
    elif index == 7:
        mc.curve(n=name, d=1, p=((0,-1.2,0),(-0.235114,-1.276393,0),(-0.380423,-1.476393,0),(-0.380423,-1.723607,0),
        (-0.235114,-1.923607,0),(0,-2,0),(0.235114,-1.923607,0),(0.380423,-1.723607,0),
        (0.380423,-1.476393,0),(0.235114,-1.276393,0),(0,-1.2,0),(0,1.2,0),(-0.235114,1.276393,0),
        (-0.380423,1.476393,0),(-0.380423,1.723607,0),(-0.235114,1.923607,0),(0,2,0),(0.235114,1.923607,0),
        (0.380423,1.723607,0),(0.380423,1.476393,0),(0.235114,1.276393,0),(0,1.2,0)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21))
    # 4 Pin
    elif index == 8:
        mc.curve(n=name, d=1, p=((-1.2,0,0),(-1.276393,0.235114,0),(-1.476393,0.380423,0),
        (-1.723607,0.380423,0),(-1.923607,0.235114,0),(-2,0,0),(-1.923607,-0.235114,0),
        (-1.723607,-0.380423,0),(-1.476393,-0.380423,0),(-1.276393,-0.235114,0),(-1.2,0,0),
        (0,0,0),(1.2,0,0),(1.276393,0.235114,0),(1.476393,0.380423,0),(1.723607,0.380423,0),
        (1.923607,0.235114,0),(2,0,0),(1.923607,-0.235114,0),(1.723607,-0.380423,0),
        (1.476393,-0.380423,0),(1.276393,-0.235114,0),(1.2,0,0),(0,0,0),(0,-1.2,0),
        (-0.235114,-1.276393,0),(-0.380423,-1.476393,0),(-0.380423,-1.723607,0),
        (-0.235114,-1.923607,0),(0,-2,0),(0.235114,-1.923607,0),(0.380423,-1.723607,0),
        (0.380423,-1.476393,0),(0.235114,-1.276393,0),(0,-1.2,0),(0,0,0),(0,1.2,0),
        (-0.235114,1.276393,0),(-0.380423,1.476393,0),(-0.380423,1.723607,0),
        (-0.235114,1.923607,0),(0,2,0),(0.235114,1.923607,0),(0.380423,1.723607,0),
        (0.380423,1.476393,0),(0.235114,1.276393,0),(0,1.2,0)), k=(0,1,2,3,4,5,6,7,8,9,10,
        11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,
        39,40,41,42,43,44,45,46))
    # Sphere
    elif index == 9:
        mc.curve(n=name, d=1, p=((0,1,0),(-0.382683,0.92388,0),(-0.707107,0.707107,0),
        (-0.92388,0.382683,0),(-1,0,0),(-0.92388,-0.382683,0),(-0.707107,-0.707107,0),
        (-0.382683,-0.92388,0),(0,-1,0),(0.382683,-0.92388,0),(0.707107,-0.707107,0),
        (0.92388,-0.382683,0),(1,0,0),(0.92388,0.382683,0),(0.707107,0.707107,0),
        (0.382683,0.92388,0),(0,1,0),(0,0.92388,0.382683),(0,0.707107,0.707107),
        (0,0.382683,0.92388),(0,0,1),(0,-0.382683,0.92388),(0,-0.707107,0.707107),
        (0,-0.92388,0.382683),(0,-1,0),(0,-0.92388,-0.382683),(0,-0.707107,-0.707107),
        (0,-0.382683,-0.92388),(0,0,-1),(0,0.382683,-0.92388),(0,0.707107,-0.707107),
        (0,0.92388,-0.382683),(0,1,0),(-0.382683,0.92388,0),(-0.707107,0.707107,0),
        (-0.92388,0.382683,0),(-1,0,0),(-0.92388,0,0.382683),(-0.707107,0,0.707107),
        (-0.382683,0,0.92388),(0,0,1),(0.382683,0,0.92388),(0.707107,0,0.707107),
        (0.92388,0,0.382683),(1,0,0),(0.92388,0,-0.382683),(0.707107,0,-0.707107),
        (0.382683,0,-0.92388),(0,0,-1),(-0.382683,0,-0.92388),(-0.707107,0,-0.707107),
        (-0.92388,0,-0.382683),(-1,0,0)),k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
        18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,
        42,43,44,45,46,47,48,49,50,51,52))
    # Dumbbell
    elif index == 10:
        mc.curve(n=name, d=1, p=((0,0.5,0),(-1,0.5,0),(-0.707107,0.5,-0.707107),(0,0.5,-1),(0,0.5,0),
        (0,0.5,-1),(0.707107,0.5,-0.707107),(1,0.5,0),(0,0.5,0),(1,0.5,0),
        (0.707107,0.5,0.707107),(0,0.5,1),(0,0.5,0),(0,0.5,1),(-0.707107,0.5,0.707107),
        (-1,0.5,0),(0,0.5,0),(0,-0.5,0),(-1,-0.5,0),(-0.707107,-0.5,-0.707107),
        (0,-0.5,-1),(0,-0.5,0),(0,-0.5,-1),(0.707107,-0.5,-0.707107),(1,-0.5,0),(0,-0.5,0),
        (1,-0.5,0),(0.707107,-0.5,0.707107),(0,-0.5,1),(0,-0.5,0),(0,-0.5,1),
        (-0.707107,-0.5,0.707107),(-1,-0.5,0)), k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
        16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32))
    # Cylinder
    elif index == 11:
        mc.curve(n=name, d=1, p=((-1,-0.5,0),(-0.707107,-0.5,-0.707107),(-0.707107,0.5,-0.707107),
        (-1,0.5,0),(-1,-0.5,0),(-0.707107,-0.5,0.707107),(-0.707107,0.5,0.707107),
        (-1,0.5,0),(-0.707107,0.5,0.707107),(0,0.5,1),(0,-0.5,1),(-0.707107,-0.5,0.707107),
        (0,-0.5,1),(0.707107,-0.5,0.707107),(0.707107,0.5,0.707107),(0,0.5,1),
        (0.707107,0.5,0.707107),(1,0.5,0),(1,-0.5,0),(0.707107,-0.5,0.707107),(1,-0.5,0),
        (1,0.5,0),(0.707107,0.5,-0.707107),(0.707107,-0.5,-0.707107),(1,-0.5,0),
        (0.707107,-0.5,-0.707107),(0,-0.5,-1),(0,0.5,-1),(0.707107,0.5,-0.707107),
        (0,0.5,-1),(-0.707107,0.5,-0.707107),(-0.707107,-0.5,-0.707107),(0,-0.5,-1)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32))
    # Cone
    elif index == 12:
        mc.curve(n=name, d=1, p=((0,0,-1),(0,2,0),(0,0,-1),(-0.707107,0,-0.707107),(0,2,0),
        (-0.707107,0,-0.707107),(-1,0,0),(0,2,0),(-1,0,0),(-0.707107,0,0.707107),(0,2,0),
        (-0.707107,0,0.707107),(0,0,1),(0,2,0),(0,0,1),(0.707107,0,0.707107),(0,2,0),
        (0.707107,0,0.707107),(1,0,0),(0,2,0),(1,0,0),(0.707107,0,-0.707107),(0,2,0),
        (0.707107,0,-0.707107),(0,0,-1),(0,2,0),(0,0,-1),(-0.707107,0,-0.707107),(0,2,0),
        (-0.707107,0,-0.707107),(-1,0,0),(0,2,0)),k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,
        15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))
    # Flat Square
    elif index == 13:
        mc.curve(n=name, d=1, p=((-1,0,-1),(1,0,-1),(1,0,1),(-1,0,1),(-1,0,-1)), k=(0,1,2,3,4))
    # Dual Flat Arrows
    elif index == 14:
        mc.curve(n=name, d=1, p=((-1,0,4),(-4,0,4),(-3,0,5),(-2,0,6),(-1,0,7),(0,0,8),(1,0,7),
        (2,0,6),(3,0,5),(4,0,4),(1,0,4),(1,0,3),(1,0,2),(1,0,1),(1,0,0),(1,0,-1),(1,0,-2),
        (1,0,-3),(1,0,-4),(4,0,-4),(3,0,-5),(2,0,-6),(1,0,-7),(0,0,-8),(-1,0,-7),(-2,0,-6),
        (-3,0,-5),(-4,0,-4),(-1,0,-4),(-1,0,-3),(-1,0,-2),(-1,0,-1),(-1,0,0),(-1,0,1),
        (-1,0,2),(-1,0,3),(-1,0,4)), k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,
        22,23,24,25,26,27,28,29,30,31,32,33,34,35,36))
    # Quad Flat Arrows
    elif index == 15:
        mc.curve(n=name, d=1, p=((0,-5,0),(-2,-3,0),(-1,-3,0),(-1,-1,0),(-3,-1,0),(-3,-2,0),
        (-5,0,0),(-3,2,0),(-3,1,0),(-1,1,0),(-1,3,0),(-2,3,0),(0,5,0),(2,3,0),
        (1,3,0),(1,1,0),(3,1,0),(3,2,0),(5,0,0),(3,-2,0),(3,-1,0),(1,-1,0),
        (1,-3,0),(2,-3,0),(0,-5,0)), k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24))
    # 3D Arrow (FK/IK Arrow)
    elif index == 16:
        mc.curve(n=name, d=1, p=((0,0,0),(-2,0,-2),(-1,0,-2),(-1,0,-5),(1,0,-5),(1,0,-2),
        (2,0,-2),(0,0,0),(0,2,-2),(0,1,-2),(0,1,-5),(0,-1,-5),(0,-1,-2),
        (0,-2,-2),(0,0,0)),k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14))
    # Rectangle with Point
    elif index == 17:
        mc.curve(n=name, d=1, p=((0,0,2.5),(-1.5,0,1),(-3,0,1),(-3,0,-1),(3,0,-1),(3,0,1),
        (1.5,0,1),(0,0,2.5)), k=(0,1,2,3,4,5,6,7))
    # Circle Cross
    elif index == 18:
        mc.circle(n=name, c=(0,0,0), nr=(0,1,0), sw=360, r=True, d=3, ut=0, tol=0, s=8, ch=1)
        mc.curve(n=(name+"1"), d=1, p=((0,0,-1),(0,0,1)), k=(0,1))
        mc.pickWalk(d='down')
        mc.rename(name+"1Shape")
        mc.curve(n=(name+"2"), d=1, p=((-1,0,0),(1,0,0)), k=(0,1))
        mc.pickWalk(d='down')
        mc.rename(name+"2Shape");
        mc.parent((name+"1Shape"), (name+"2Shape"), name, r=True, s=True)
        mc.delete((name+"1"), (name+"2"))
        mc.delete((name),ch=True)
    # Circle Arrow (Body Controller)
    elif index == 19:
        mc.circle(n=(name), c=(0,0,0), nr=(0,1,0), sw=360, r=0.8, d=3, ut=0, tol=0, s=8, ch=1)
        mc.pickWalk(d='down')
        mc.rename(name+"Shape")
        mc.curve(n=(name + "1"), d=1, p=((0.448913,0,0.659205),(0.457839,0,0.707653),
        (0.43562,0,0.726309),(0.389727,0,0.761461),(0.317127,0,0.807243),(0.242199,0,0.852344),
        (0.165051,0,0.890957),(0.0916126,0,0.922558),(0.0354615,0,0.944185),(0,0,0.956437),
        (0,0,0.800148),(0,0,0.956437),(-0.0354615,0,0.944185),(-0.0916126,0,0.922558),
        (-0.165051,0,0.890957),(-0.242199,0,0.852344),(-0.317127,0,0.807243),
        (-0.389727,0,0.761461),(-0.43562,0,0.726309),(-0.457839,0,0.707653),
        (-0.448913,0,0.659205)), k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
        mc.pickWalk(d='down')
        mc.rename(name+"1Shape")
        mc.parent((name+"1Shape"), (name+"Shape"), name, r=True, s=True)
        mc.delete(name+"1")
        mc.delete(name, ch=True);
    # Locator Shape
    elif index == 20:
        mc.curve(n=name, d=1, p=((0,0,-1),(0,0,1),(0,0,0),(1,0,0),(-1,0,0),(0,0,0),(0,1,0),(0,-1,0)),
        k=(0,1,2,3,4,5,6,7))
    # Pyramid
    elif index == 21:
        mc.curve(n=name, d=1, p=((0.375,-0.25,-0.375),(0,0.5,0),(0.375,-0.25,0.375),
        (0.375,-0.25,-0.375),(-0.375,-0.25,-0.375),(0,0.5,0),(-0.375,-0.25,0.375),
        (-0.375,-0.25,-0.375),(-0.375,-0.25,0.375),(0.375,-0.25,0.375)),
        k=(0,1,2,3,4,5,6,7,8,9))
    # Foot (Better)
    elif index == 22:
        mc.curve(n=name, d=1, p=((0,1.195249,0.555115),(0,1.180393,0.832049),(0,1.133567,1.105407),
        (0,1.048732,1.369346),(0,0.917923,1.613767),(0,0.738447,1.825003),(0,0.520555,1.996316),
        (0,0.271934,2.118642),(-1.67422e-006,0,2.182925),(-0.13416,0,2.16342),
        (-0.266779,0,2.095529),(-0.395472,0,1.99807),(-0.518993,0,1.858632),
        (-0.636496,0,1.679268),(-0.737632,0,1.452024),(-0.819474,0,1.166445),
        (-0.846144,0,0.821387),(-0.824602,0,0.556128),(-0.749206,0,0.167213),
        (-0.673656,0,-0.127237),(-0.597808,0,-0.419587),(-0.545054,0,-0.746104),
        (-0.544891,0,-1.097217),(-0.571904,0,-1.448294),(-0.512279,0,-1.753435),
        (-0.393271,0,-1.92306),(-0.266839,0,-2.035747),(-0.133965,0,-2.097731),(0,0,-2.120128),
        (0.133965,0,-2.097731),(0.266839,0,-2.035747),(0.393271,0,-1.92306),
        (0.512279,0,-1.753435),(0.571904,0,-1.448294),(0.544891,0,-1.097217),
        (0.545054,0,-0.746104),(0.597807,0,-0.419586),(0.673656,0,-0.127237),
        (0.749207,0,0.167214),(0.824602,0,0.556128),(0.793719,0.309015,0.555115),
        (0.711605,0.597122,0.555115),(0.58157,0.845165,0.555115),(0.410881,1.034146,0.555115),
        (0.212644,1.153473,0.555115),(0,1.195249,0.555115),(-0.212644,1.153473,0.555115),
        (-0.410881,1.034146,0.555115),(-0.58157,0.845165,0.555115),(-0.711605,0.597122,0.555115),
        (-0.793719,0.309015,0.555115),(-0.822457,0,0.555115),(-0.846144,0,0.821387),
        (-0.819474,0,1.166445),(-0.737632,0,1.452024),(-0.636496,0,1.679268),
        (-0.518993,0,1.858632),(-0.395472,0,1.99807),(-0.266779,0,2.095529),(-0.13416,0,2.16342),
        (-1.67422e-006,0,2.182925),(0.134293,0,2.163449),(0.266596,0,2.09545),(0.395504,0,1.9981),
        (0.519008,0,1.858641),(0.636486,0,1.679267),(0.737631,0,1.452029),(0.819474,0,1.166447),
        (0.846144,0,0.82139),(0.824602,0,0.556128)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
        24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,
        54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69))
    # Trapezoid (Lower Torso)
    elif index == 23:
        mc.curve(n=name, d=1, p=((2,0,2),(-2,0,2),(-2,0,-2),(2,0,-2),(2,0,2),(1.5,-1,1.5),(-1.5,-1,1.5),(-2,0,2),
        (-1.5,-1,1.5),(-1.5,-1,-1.5),(-2,0,-2),(-1.5,-1,-1.5),(1.5,-1,-1.5),(2,0,-2),(1.5,-1,-1.5),(1.5,-1,1.5)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
    # Trapezoid (Lower Torso)
    elif index == 24:
        mc.curve(n=name, d=1, p=((-2,0,2),(2,0,2),(2,0,-2),(-2,0,-2),(-2,0,2),(-1.5,1,1.5),(1.5,1,1.5),
        (2,0,2),(1.5,1,1.5),(1.5,1,-1.5),(2,0,-2),(1.5,1,-1.5),(-1.5,1,-1.5),(-2,0,-2),
        (-1.5,1,-1.5),(-1.5,1,1.5)),k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
    elif index == 25:
        mc.curve(n=name, d=1, p=((0,1,0),(-1,0.00278996,6.18172e-08),(0,0,1),(0,1,0),
        (1,0.00278996,0),(0,0,1),(1,0.00278996,0),(0,0,-1),(0,1,0),(0,0,-1),
        (-1,0.00278996,6.18172e-08),(0,-1,0),(0,0,-1),(1,0.00278996,0),(0,-1,0),(0,0,1)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
    # Ring Vertical Right
    elif index == 26:
        mc.curve(n=name, d=1, p=((-0.525788,0.707107,0.707107),(-0.525788,0,1),(0,0,1),(0,0.707107,0.707107),(-0.525788,0.707107,0.707107),
        (-0.525788,1,0),(0,1,0),(0,0.707107,0.707107),(0,1,0),(0,0.707107,-0.707107),(-0.525788,0.707107,-0.707107),(-0.525788,1,0),
        (-0.525788,0.707107,-0.707107),(-0.525788,0,-1),(0,0,-1),(0,0.707107,-0.707107),(-0.525788,0.707107,-0.707107),(0,0.707107,-0.707107),
        (0,0,-1),(0,-0.707107,-0.707107),(-0.525788,-0.707107,-0.707107),(-0.525788,0,-1),(-0.525788,-0.707107,-0.707107),(-0.525788,-1,0),
        (0,-1,0),(0,-0.707107,-0.707107),(0,-1,0),(0,-0.707107,0.707107),(-0.525788,-0.707107,0.707107),(-0.525788,-1,0),(-0.525788,-0.707107,0.707107),
        (-0.525788,0,1),(0,0,1),(0,-0.707107,0.707107)), k=(0,1,2,3,4,5,6,7,8,9,10,11,
        12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33))
    # Ring Vertical Left
    elif index == 27:
        mc.curve(n=name, d=1, p=((0.525788,0.707107,0.707107),(0.525788,0,1),(0,0,1),(0,0.707107,0.707107),(0.525788,0.707107,0.707107),
        (0.525788,1,0),(0,1,0),(0,0.707107,0.707107),(0,1,0),(0,0.707107,-0.707107),(0.525788,0.707107,-0.707107),(0.525788,1,0),
        (0.525788,0.707107,-0.707107),(0.525788,0,-1),(0,0,-1),(0,0.707107,-0.707107),(0.525788,0.707107,-0.707107),(0,0.707107,-0.707107),
        (0,0,-1),(0,-0.707107,-0.707107),(0.525788,-0.707107,-0.707107),(0.525788,0,-1),(0.525788,-0.707107,-0.707107),(0.525788,-1,0),
        (0,-1,0),(0,-0.707107,-0.707107),(0,-1,0),(0,-0.707107,0.707107),(0.525788,-0.707107,0.707107),(0.525788,-1,0),(0.525788,-0.707107,0.707107),
        (0.525788,0,1),(0,0,1),(0,-0.707107,0.707107)), k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
        28,29,30,31,32,33))
    # Shifted Sphere
    elif index == 28:
        mc.curve(n=name, d=1, p=((0,1,1),(-0.382683,0.92388,1),(-0.707107,0.707107,1),(-0.92388,0.382683,1),(-1,0,1),(-0.92388,-0.382683,1),
        (-0.707107,-0.707107,1),(-0.382683,-0.92388,1),(0,-1,1),(0.382683,-0.92388,1),(0.707107,-0.707107,1),(0.92388,-0.382683,1),
        (1,0,1),(0.92388,0.382683,1),(0.707107,0.707107,1),(0.382683,0.92388,1),(0,1,1),(0,0.92388,1.382683),(0,0.707107,1.707107),
        (0,0.382683,1.92388),(0,0,2),(0,-0.382683,1.92388),(0,-0.707107,1.707107),(0,-0.92388,1.382683),(0,-1,1),
        (0,-0.92388,0.617317),(0,-0.707107,0.292893),(0,-0.382683,0.07612),(0,0,0),(0,0.382683,0.07612),(0,0.707107,0.292893),
        (0,0.92388,0.617317),(0,1,1),(-0.382683,0.92388,1),(-0.707107,0.707107,1),(-0.92388,0.382683,1),(-1,0,1),
        (-0.92388,0,1.382683),(-0.707107,0,1.707107),(-0.382683,0,1.92388),(0,0,2),(0.382683,0,1.92388),(0.707107,0,1.707107),
        (0.92388,0,1.382683),(1,0,1),(0.92388,0,0.617317),(0.707107,0,0.292893),(0.382683,0,0.07612),(0,0,0),
        (-0.382683,0,0.07612),(-0.707107,0,0.292893),(-0.92388,0,0.617317),(-1,0,1)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
        28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52))
    # Concave Square
    elif index == 29:
        mc.curve(n=name, d=3, p=((2,0,2),(2,0,2),(2,0,2),(0,0,0),(2,0,-2),(2,0,-2),(2,0,-2),(0,0,0),
        (-2,0,-2),(-2,0,-2),(-2,0,-2),(0,0,0),(-2,0,2),(-2,0,2),(-2,0,2),(0,0,0),(2,0,2),(2,0,2),(2,0,2)),
        k=(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18))
    # Half Sphere
    elif index == 30:
        mc.circle(n=name)
        mc.rotate(90,0,0, r=True)
        mc.circle(n=(name+"1"), c=(0,0,0), nr=(0,1,0), sw=180, r=1, d=3, ut=0, tol=0, s=8, ch=1)
        mc.rotate(0,0,-90, r=True)
        mc.circle(n=(name+"2"), c=(0,0,0), nr=(0,1,0), sw=180, r=1, d=3, ut=0, tol=0, s=8, ch=1)
        mc.rotate(90,0,-90, r=True)
        mc.curve(n=(name+"3"), d=1, p=((0,0,1),(0,0,-1)), k=(0,1))
        mc.pickWalk(d='down')
        mc.rename(name+"3Shape")
        mc.curve(n=(name+"4"), d=1, p=((0,0,1),(0,0,-1)), k=(0,1))
        mc.rotate(0,90,0, r=True)
        mc.pickWalk(d='down')
        mc.rename(name+"4Shape")
        names = [(name),(name+"1"),(name+"2"),(name+"3"),(name+"4")]
        for n in names:
            mc.select(n)
            mc.makeIdentity(apply=True, r=True)
        mc.parent((name+"1Shape"), (name+"2Shape"), (name+"3Shape"), (name+"4Shape"), (name), r=True, s=True)
        mc.delete((name+"1"), (name+"2"), (name+"3"), (name+"4"))
    # ProxyMain
    elif index == 31:
        mc.curve(n=name,d=1,p=((0,0,11),(2,0,9),(2,0,7),(7,0,7),(7,0,2),(9,0,2),(10,0,0),
        (9,0,-2),(7,0,-2),(7,0,-7),(2,0,-7),(2,0,-9),(0,0,-10),(-2,0,-9),(-2,0,-7),(-7,0,-7),
        (-7,0,-2),(-9,0,-2),(-10,0,0),(-9,0,2),(-7,0,2),(-7,0,7),(-2,0,7),(-2,0,9),(0,0,11)),
        k=(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24))
    # ProxyMain2
    elif index == 32:
        mc.curve(n=name,d=1, p=((6.5,0,6.5),(6.5,0,-6.5),(-6.5,0,-6.5),(-6.5,0,6.5),(6.5,0,6.5)),k=(0,1,2,3,4))
    mc.setAttr((name+".overrideEnabled"),1)
